name: Back-port when a maintainer comments “/backport <branch-or-tag>”

on:
  workflow_call:
    inputs: {}

permissions:
  contents: write          # push a branch
  pull-requests: write     # open the back-port PR

jobs:
  backport:
    runs-on: ubuntu-latest

    # only trigger on comments that
    #   • are on a PR,   • start with "/backport ",
    #   • come from collaborators/members/owners
    if: |
      github.event.issue.pull_request != null &&
      startsWith(github.event.comment.body, '/backport ')

    steps:
    # ─────────────────────────────────────────────────────────────
    - name: Checkout full history (+tags)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0        # we need tags for detection

    # ─────────────────────────────────────────────────────────────
    - name: Extract the parameter after "/backport "
      id: vars
      run: |
        body="${{ github.event.comment.body }}"
        target=$(echo "$body" | sed -n 's#^/backport[[:space:]]\+\([^[:space:]]\+\).*#\1#p')
        echo "target=$target" >>"$GITHUB_OUTPUT"

    - name: Get original pull request branch name
      id: prbranch
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo:  context.repo.repo,
            pull_number: context.issue.number
          });
          core.setOutput('head_ref', pr.data.head.ref);

    # ─────────────────────────────────────────────────────────────
    - name: Detect branch vs tag – semver bump if needed
      id: decide
      env:
        TARGET: ${{ steps.vars.outputs.target }}
      run: |
        set -euo pipefail
        git fetch --all --tags --prune

        echo "Requested back-port target: $TARGET"
        randomString=$(head -c 64 /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 6)
        echo "backport_pr_name=backport/${{ steps.prbranch.outputs.head_ref }}-$randomString" >>"$GITHUB_OUTPUT"

        # test for existing branch first
        if git ls-remote --exit-code --heads origin "$TARGET" >/dev/null; then
          echo "branch=$TARGET"   >>"$GITHUB_OUTPUT"
          echo "created=false"    >>"$GITHUB_OUTPUT"
          exit 0
        fi

        # test for tag
        if git show-ref --verify --quiet "refs/tags/$TARGET"; then
          # does the tag end with a number ?
          if [[ "$TARGET" =~ ^(.*)([0-9]4\.[0-9]2)$ ]]; then
            new_branch="release/$TARGET.1"
          elif [[ "$TARGET" =~ ^(.+)\.([0-9]+)$ ]]; then
            tag_name=${BASH_REMATCH[1]}
            patch=${BASH_REMATCH[2]}
            patch=$((patch+1))
            new_branch="release/${tag_name}.${patch}"
          else
            # non-semver tag → keep original name
            new_branch="release/${TARGET}"
          fi

          # if release branch already exists, exit and print message
          if git ls-remote --exit-code --heads origin "$new_branch" >/dev/null; then
            echo "::error::Branch named '$new_branch' already exists. Please delete it before retrying."
            exit 1
          fi

          echo "Using branch: $new_branch"
          git switch --create "$new_branch" "$TARGET"
          git push --set-upstream origin "$new_branch"
          echo "branch=$new_branch" >>"$GITHUB_OUTPUT"
          echo "created=true"       >>"$GITHUB_OUTPUT"
          exit 0
        fi

        echo "::error::No branch **or** tag named '$TARGET' exists."
        exit 1
      shell: bash

    # ─────────────────────────────────────────────────────────────
    - name: Back-port with kiegroup/git-backporting
      uses: kiegroup/git-backporting@v4
      with:
        target-branch:  ${{ steps.decide.outputs.branch }}
        pull-request:   ${{ github.event.issue.pull_request.url }}
        auth:           ${{ secrets.GITHUB_TOKEN }}
        bp-branch-name: ${{ steps.decide.outputs.backport_pr_name }}
        labels:         "auto-backport"

    - name: Comment on original PR
      if: steps.decide.outputs.created == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `📌 Created branch **${{ steps.decide.outputs.branch }}** from tag **${{ steps.vars.outputs.target }}** for back-porting.`
          })

